1. JVM: 자바를 실행하기 위한 jdk같은 환경이며 코드를 실행 하는 역할을 담당하고 있다 
CG: Garbage Collector란 뜻으로 java에서 선언했던 객체의 사용이 끝나고 난다면 불필요하게 용량이 낭비되고 만다 
이를 방지하기 위해서 cg를 사용하여 사용되지 않는 객체를 자동으로 찾아서 처분한다
 
2. 오버로딩: 상위 클라스의 내용을 하위 클래스에서 재정의 해서 사용 
   오버라이딩이란 : 상위 폴더에서 받은 정보를 가공해서 사용

3.싱글톤 패턴 이란 디자인 패턴의 한종류이며 실행을 돕는 클래스에 각각 연결된 다른 클래스를 객체선언하여 제어

4.list: [1,2,3,4,5,6,..]처럼 여러가지 값을 합쳐서 저장
map: 한가지 항목에 이름,학번,성적등의 여러가지의 요소를 각각 가지고 있음 


1. String, StringBuffer, StringBuilder은 같은 문자열 변수이지만 사용 하는 방법이 다르다 string 은 한번 선언했다가 내용을 수정하려면 재선언 해야하지만
StringBuffer, StringBuilder는 .append를 붙여서 기존의 객체를 수정하는것이 가능하다. 버퍼의 경우 누군가 변수를 사용하고 있다면 잠시 기다리지만
빌더의 경우 그런것이 없어 빠르지만 데이터의 일관성이 깨질수 있습니다.
2. Restful API란  Rest(HTTP활용한 웹 통신 방식)과 API(애플리케이션을) 합친것으로 앱에서 HTTP활용한 웹 통신 방식이다. 
GET, POST, PUT, DELETE 같은 방식으로 데이터를 제어 하거나 데이터를 받는다
3.Call By Value는 함수에 인자의 값을 복사해 전달하며, 원본 데이터는 변화하지 않습니다. 반면, Call By Reference는 인자의 주소를 전달해 원본 데이터에 직접 접근할 수 있어, 원본 데이터가 변화할 수 있습니다. 일반적으로 기본 데이터 타입은 Call By Value, 객체나 배열은 Call By Reference를 사용합니다.
4. 위의 그림은 유저가  http의 tcp 통신으로 서버에 접속 하는 과정이다
	1.사용자가 클라이언트를 사용해 지정된 url 연결시도
	2.연결 시도한 웹페이지 url를 HTTP에서 받아 dns에서  url 의 ip 주소를 받아 다시 http로 송신
	3.http에서 ip를 이용해 tcp접속으로 해당 ip에 접속
	4.서버의 http에서 서버의 ip 즉 TCp 통신으로 보낸 유저의 신호를 수신 서버의
	 http에서 요청 받은 자료를 웹서버에서 찾아 다시 왔던 ip에 TCP 송신으로 자료를 전송
	5.TCP 송신으로 보낸 자료를 유저 http에서 수신후 유저 클라이언트로 사용

5. VO, BO, DAO, DTO는 각각의 역할을 가진 클래스로 DAO는 데이터 접근을, BO는 비즈니스 로직 처리를
DTO는 데이터 전송을, VO는 특정 값을 표현하는 역할을 담당합니다.

VO(Value Object) : 실제 데이터만을 저장하는 객체를 말합니다
BO(Business Object) : 여러 DAO를 활용해 비즈니스 로직을 처리하는 객체를 말합니다. (Service에 해당)
DAO(Data Access Object) : DB의 데이터에 접근을 위한 객체를 말합니다. (보통 Repository, Mapper에 해당)
DTO(Data Transfer Object) : 각 계층 간의 데이터 교환을 위한 객체를 말합니다. (여기서 말하는 계층은 Controller, View, Business Layer, Persistent Layer))


6. ==는 경로까지 포함한 비교 equals은 내용만 비교
